// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  scores    Score[]
}

model Quiz {
  id         String     @id @default(uuid())
  title      String
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  questions  Question[]
  scores     Score[]
}

model Category {
  id      String @id @default(uuid())
  name    String @unique
  quizzes Quiz[]
}

model Question {
  id      String       @id @default(uuid())
  quizId  String
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text    String
  type    QuestionType
  answers Answer[]
}

model Answer {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  isCorrect  Boolean
}

model Score {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  time   Float
  points Float
}

enum UserRole {
  USER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  MATCHING
  ORDERING
  SLIDER
}
